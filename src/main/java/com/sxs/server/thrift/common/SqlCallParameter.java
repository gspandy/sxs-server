/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sxs.server.thrift.common;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-19")
public class SqlCallParameter implements org.apache.thrift.TBase<SqlCallParameter, SqlCallParameter._Fields>, java.io.Serializable, Cloneable, Comparable<SqlCallParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SqlCallParameter");

  private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField IS_NAMED_FIELD_DESC = new org.apache.thrift.protocol.TField("isNamed", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMETERS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("parametersMap", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SqlCallParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SqlCallParameterTupleSchemeFactory());
  }

  public String sql; // required
  public List<String> parameters; // required
  public boolean isNamed; // optional
  public Map<String,String> parametersMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SQL((short)1, "sql"),
    PARAMETERS((short)2, "parameters"),
    IS_NAMED((short)3, "isNamed"),
    PARAMETERS_MAP((short)4, "parametersMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SQL
          return SQL;
        case 2: // PARAMETERS
          return PARAMETERS;
        case 3: // IS_NAMED
          return IS_NAMED;
        case 4: // PARAMETERS_MAP
          return PARAMETERS_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISNAMED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_NAMED,_Fields.PARAMETERS_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IS_NAMED, new org.apache.thrift.meta_data.FieldMetaData("isNamed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARAMETERS_MAP, new org.apache.thrift.meta_data.FieldMetaData("parametersMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SqlCallParameter.class, metaDataMap);
  }

  public SqlCallParameter() {
  }

  public SqlCallParameter(
    String sql,
    List<String> parameters)
  {
    this();
    this.sql = sql;
    this.parameters = parameters;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SqlCallParameter(SqlCallParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSql()) {
      this.sql = other.sql;
    }
    if (other.isSetParameters()) {
      List<String> __this__parameters = new ArrayList<String>(other.parameters);
      this.parameters = __this__parameters;
    }
    this.isNamed = other.isNamed;
    if (other.isSetParametersMap()) {
      Map<String,String> __this__parametersMap = new HashMap<String,String>(other.parametersMap);
      this.parametersMap = __this__parametersMap;
    }
  }

  public SqlCallParameter deepCopy() {
    return new SqlCallParameter(this);
  }

  @Override
  public void clear() {
    this.sql = null;
    this.parameters = null;
    setIsNamedIsSet(false);
    this.isNamed = false;
    this.parametersMap = null;
  }

  public String getSql() {
    return this.sql;
  }

  public SqlCallParameter setSql(String sql) {
    this.sql = sql;
    return this;
  }

  public void unsetSql() {
    this.sql = null;
  }

  /** Returns true if field sql is set (has been assigned a value) and false otherwise */
  public boolean isSetSql() {
    return this.sql != null;
  }

  public void setSqlIsSet(boolean value) {
    if (!value) {
      this.sql = null;
    }
  }

  public int getParametersSize() {
    return (this.parameters == null) ? 0 : this.parameters.size();
  }

  public java.util.Iterator<String> getParametersIterator() {
    return (this.parameters == null) ? null : this.parameters.iterator();
  }

  public void addToParameters(String elem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<String>();
    }
    this.parameters.add(elem);
  }

  public List<String> getParameters() {
    return this.parameters;
  }

  public SqlCallParameter setParameters(List<String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public void unsetParameters() {
    this.parameters = null;
  }

  /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.parameters = null;
    }
  }

  public boolean isIsNamed() {
    return this.isNamed;
  }

  public SqlCallParameter setIsNamed(boolean isNamed) {
    this.isNamed = isNamed;
    setIsNamedIsSet(true);
    return this;
  }

  public void unsetIsNamed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNAMED_ISSET_ID);
  }

  /** Returns true if field isNamed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNamed() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNAMED_ISSET_ID);
  }

  public void setIsNamedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNAMED_ISSET_ID, value);
  }

  public int getParametersMapSize() {
    return (this.parametersMap == null) ? 0 : this.parametersMap.size();
  }

  public void putToParametersMap(String key, String val) {
    if (this.parametersMap == null) {
      this.parametersMap = new HashMap<String,String>();
    }
    this.parametersMap.put(key, val);
  }

  public Map<String,String> getParametersMap() {
    return this.parametersMap;
  }

  public SqlCallParameter setParametersMap(Map<String,String> parametersMap) {
    this.parametersMap = parametersMap;
    return this;
  }

  public void unsetParametersMap() {
    this.parametersMap = null;
  }

  /** Returns true if field parametersMap is set (has been assigned a value) and false otherwise */
  public boolean isSetParametersMap() {
    return this.parametersMap != null;
  }

  public void setParametersMapIsSet(boolean value) {
    if (!value) {
      this.parametersMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SQL:
      if (value == null) {
        unsetSql();
      } else {
        setSql((String)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((List<String>)value);
      }
      break;

    case IS_NAMED:
      if (value == null) {
        unsetIsNamed();
      } else {
        setIsNamed((Boolean)value);
      }
      break;

    case PARAMETERS_MAP:
      if (value == null) {
        unsetParametersMap();
      } else {
        setParametersMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SQL:
      return getSql();

    case PARAMETERS:
      return getParameters();

    case IS_NAMED:
      return isIsNamed();

    case PARAMETERS_MAP:
      return getParametersMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SQL:
      return isSetSql();
    case PARAMETERS:
      return isSetParameters();
    case IS_NAMED:
      return isSetIsNamed();
    case PARAMETERS_MAP:
      return isSetParametersMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SqlCallParameter)
      return this.equals((SqlCallParameter)that);
    return false;
  }

  public boolean equals(SqlCallParameter that) {
    if (that == null)
      return false;

    boolean this_present_sql = true && this.isSetSql();
    boolean that_present_sql = true && that.isSetSql();
    if (this_present_sql || that_present_sql) {
      if (!(this_present_sql && that_present_sql))
        return false;
      if (!this.sql.equals(that.sql))
        return false;
    }

    boolean this_present_parameters = true && this.isSetParameters();
    boolean that_present_parameters = true && that.isSetParameters();
    if (this_present_parameters || that_present_parameters) {
      if (!(this_present_parameters && that_present_parameters))
        return false;
      if (!this.parameters.equals(that.parameters))
        return false;
    }

    boolean this_present_isNamed = true && this.isSetIsNamed();
    boolean that_present_isNamed = true && that.isSetIsNamed();
    if (this_present_isNamed || that_present_isNamed) {
      if (!(this_present_isNamed && that_present_isNamed))
        return false;
      if (this.isNamed != that.isNamed)
        return false;
    }

    boolean this_present_parametersMap = true && this.isSetParametersMap();
    boolean that_present_parametersMap = true && that.isSetParametersMap();
    if (this_present_parametersMap || that_present_parametersMap) {
      if (!(this_present_parametersMap && that_present_parametersMap))
        return false;
      if (!this.parametersMap.equals(that.parametersMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sql = true && (isSetSql());
    list.add(present_sql);
    if (present_sql)
      list.add(sql);

    boolean present_parameters = true && (isSetParameters());
    list.add(present_parameters);
    if (present_parameters)
      list.add(parameters);

    boolean present_isNamed = true && (isSetIsNamed());
    list.add(present_isNamed);
    if (present_isNamed)
      list.add(isNamed);

    boolean present_parametersMap = true && (isSetParametersMap());
    list.add(present_parametersMap);
    if (present_parametersMap)
      list.add(parametersMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(SqlCallParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNamed()).compareTo(other.isSetIsNamed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNamed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNamed, other.isNamed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParametersMap()).compareTo(other.isSetParametersMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParametersMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parametersMap, other.parametersMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SqlCallParameter(");
    boolean first = true;

    sb.append("sql:");
    if (this.sql == null) {
      sb.append("null");
    } else {
      sb.append(this.sql);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameters:");
    if (this.parameters == null) {
      sb.append("null");
    } else {
      sb.append(this.parameters);
    }
    first = false;
    if (isSetIsNamed()) {
      if (!first) sb.append(", ");
      sb.append("isNamed:");
      sb.append(this.isNamed);
      first = false;
    }
    if (isSetParametersMap()) {
      if (!first) sb.append(", ");
      sb.append("parametersMap:");
      if (this.parametersMap == null) {
        sb.append("null");
      } else {
        sb.append(this.parametersMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (sql == null) {
      throw new TProtocolException("Required field 'sql' was not present! Struct: " + toString());
    }
    if (parameters == null) {
      throw new TProtocolException("Required field 'parameters' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SqlCallParameterStandardSchemeFactory implements SchemeFactory {
    public SqlCallParameterStandardScheme getScheme() {
      return new SqlCallParameterStandardScheme();
    }
  }

  private static class SqlCallParameterStandardScheme extends StandardScheme<SqlCallParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SqlCallParameter struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SQL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql = iprot.readString();
              struct.setSqlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.parameters = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.parameters.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_NAMED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isNamed = iprot.readBool();
              struct.setIsNamedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMETERS_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.parametersMap = new HashMap<String,String>(2*_map3.size);
                String _key4;
                String _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readString();
                  _val5 = iprot.readString();
                  struct.parametersMap.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setParametersMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SqlCallParameter struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sql != null) {
        oprot.writeFieldBegin(SQL_FIELD_DESC);
        oprot.writeString(struct.sql);
        oprot.writeFieldEnd();
      }
      if (struct.parameters != null) {
        oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.parameters.size()));
          for (String _iter7 : struct.parameters)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsNamed()) {
        oprot.writeFieldBegin(IS_NAMED_FIELD_DESC);
        oprot.writeBool(struct.isNamed);
        oprot.writeFieldEnd();
      }
      if (struct.parametersMap != null) {
        if (struct.isSetParametersMap()) {
          oprot.writeFieldBegin(PARAMETERS_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parametersMap.size()));
            for (Map.Entry<String, String> _iter8 : struct.parametersMap.entrySet())
            {
              oprot.writeString(_iter8.getKey());
              oprot.writeString(_iter8.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SqlCallParameterTupleSchemeFactory implements SchemeFactory {
    public SqlCallParameterTupleScheme getScheme() {
      return new SqlCallParameterTupleScheme();
    }
  }

  private static class SqlCallParameterTupleScheme extends TupleScheme<SqlCallParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SqlCallParameter struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sql);
      {
        oprot.writeI32(struct.parameters.size());
        for (String _iter9 : struct.parameters)
        {
          oprot.writeString(_iter9);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetIsNamed()) {
        optionals.set(0);
      }
      if (struct.isSetParametersMap()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetIsNamed()) {
        oprot.writeBool(struct.isNamed);
      }
      if (struct.isSetParametersMap()) {
        {
          oprot.writeI32(struct.parametersMap.size());
          for (Map.Entry<String, String> _iter10 : struct.parametersMap.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SqlCallParameter struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sql = iprot.readString();
      struct.setSqlIsSet(true);
      {
        org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.parameters = new ArrayList<String>(_list11.size);
        String _elem12;
        for (int _i13 = 0; _i13 < _list11.size; ++_i13)
        {
          _elem12 = iprot.readString();
          struct.parameters.add(_elem12);
        }
      }
      struct.setParametersIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.isNamed = iprot.readBool();
        struct.setIsNamedIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.parametersMap = new HashMap<String,String>(2*_map14.size);
          String _key15;
          String _val16;
          for (int _i17 = 0; _i17 < _map14.size; ++_i17)
          {
            _key15 = iprot.readString();
            _val16 = iprot.readString();
            struct.parametersMap.put(_key15, _val16);
          }
        }
        struct.setParametersMapIsSet(true);
      }
    }
  }

}

