/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sxs.server.thrift.gen;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-21")
public class SqlCallService {

  /**
   *  * sql调用服务定义
   * *
   */
  public interface Iface {

    public OperationResult insertSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException;

    public OperationResult selectSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException;

    public OperationResult updateSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException;

    public OperationResult deleteSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException;

    public OperationResult batchOperationSql(List<SqlCallParameter> parameterList) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void insertSql(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectSql(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSql(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSql(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchOperationSql(List<SqlCallParameter> parameterList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public OperationResult insertSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException
    {
      send_insertSql(sqlCallParameter);
      return recv_insertSql();
    }

    public void send_insertSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException
    {
      insertSql_args args = new insertSql_args();
      args.setSqlCallParameter(sqlCallParameter);
      sendBase("insertSql", args);
    }

    public OperationResult recv_insertSql() throws org.apache.thrift.TException
    {
      insertSql_result result = new insertSql_result();
      receiveBase(result, "insertSql");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertSql failed: unknown result");
    }

    public OperationResult selectSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException
    {
      send_selectSql(sqlCallParameter);
      return recv_selectSql();
    }

    public void send_selectSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException
    {
      selectSql_args args = new selectSql_args();
      args.setSqlCallParameter(sqlCallParameter);
      sendBase("selectSql", args);
    }

    public OperationResult recv_selectSql() throws org.apache.thrift.TException
    {
      selectSql_result result = new selectSql_result();
      receiveBase(result, "selectSql");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectSql failed: unknown result");
    }

    public OperationResult updateSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException
    {
      send_updateSql(sqlCallParameter);
      return recv_updateSql();
    }

    public void send_updateSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException
    {
      updateSql_args args = new updateSql_args();
      args.setSqlCallParameter(sqlCallParameter);
      sendBase("updateSql", args);
    }

    public OperationResult recv_updateSql() throws org.apache.thrift.TException
    {
      updateSql_result result = new updateSql_result();
      receiveBase(result, "updateSql");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSql failed: unknown result");
    }

    public OperationResult deleteSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException
    {
      send_deleteSql(sqlCallParameter);
      return recv_deleteSql();
    }

    public void send_deleteSql(SqlCallParameter sqlCallParameter) throws org.apache.thrift.TException
    {
      deleteSql_args args = new deleteSql_args();
      args.setSqlCallParameter(sqlCallParameter);
      sendBase("deleteSql", args);
    }

    public OperationResult recv_deleteSql() throws org.apache.thrift.TException
    {
      deleteSql_result result = new deleteSql_result();
      receiveBase(result, "deleteSql");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSql failed: unknown result");
    }

    public OperationResult batchOperationSql(List<SqlCallParameter> parameterList) throws org.apache.thrift.TException
    {
      send_batchOperationSql(parameterList);
      return recv_batchOperationSql();
    }

    public void send_batchOperationSql(List<SqlCallParameter> parameterList) throws org.apache.thrift.TException
    {
      batchOperationSql_args args = new batchOperationSql_args();
      args.setParameterList(parameterList);
      sendBase("batchOperationSql", args);
    }

    public OperationResult recv_batchOperationSql() throws org.apache.thrift.TException
    {
      batchOperationSql_result result = new batchOperationSql_result();
      receiveBase(result, "batchOperationSql");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchOperationSql failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void insertSql(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertSql_call method_call = new insertSql_call(sqlCallParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertSql_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SqlCallParameter sqlCallParameter;
      public insertSql_call(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sqlCallParameter = sqlCallParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertSql", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertSql_args args = new insertSql_args();
        args.setSqlCallParameter(sqlCallParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OperationResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertSql();
      }
    }

    public void selectSql(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectSql_call method_call = new selectSql_call(sqlCallParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectSql_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SqlCallParameter sqlCallParameter;
      public selectSql_call(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sqlCallParameter = sqlCallParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectSql", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectSql_args args = new selectSql_args();
        args.setSqlCallParameter(sqlCallParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OperationResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectSql();
      }
    }

    public void updateSql(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSql_call method_call = new updateSql_call(sqlCallParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSql_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SqlCallParameter sqlCallParameter;
      public updateSql_call(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sqlCallParameter = sqlCallParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSql", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSql_args args = new updateSql_args();
        args.setSqlCallParameter(sqlCallParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OperationResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSql();
      }
    }

    public void deleteSql(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSql_call method_call = new deleteSql_call(sqlCallParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSql_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SqlCallParameter sqlCallParameter;
      public deleteSql_call(SqlCallParameter sqlCallParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sqlCallParameter = sqlCallParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSql", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSql_args args = new deleteSql_args();
        args.setSqlCallParameter(sqlCallParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OperationResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSql();
      }
    }

    public void batchOperationSql(List<SqlCallParameter> parameterList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchOperationSql_call method_call = new batchOperationSql_call(parameterList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchOperationSql_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<SqlCallParameter> parameterList;
      public batchOperationSql_call(List<SqlCallParameter> parameterList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parameterList = parameterList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchOperationSql", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchOperationSql_args args = new batchOperationSql_args();
        args.setParameterList(parameterList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OperationResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchOperationSql();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("insertSql", new insertSql());
      processMap.put("selectSql", new selectSql());
      processMap.put("updateSql", new updateSql());
      processMap.put("deleteSql", new deleteSql());
      processMap.put("batchOperationSql", new batchOperationSql());
      return processMap;
    }

    public static class insertSql<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertSql_args> {
      public insertSql() {
        super("insertSql");
      }

      public insertSql_args getEmptyArgsInstance() {
        return new insertSql_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertSql_result getResult(I iface, insertSql_args args) throws org.apache.thrift.TException {
        insertSql_result result = new insertSql_result();
        result.success = iface.insertSql(args.sqlCallParameter);
        return result;
      }
    }

    public static class selectSql<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectSql_args> {
      public selectSql() {
        super("selectSql");
      }

      public selectSql_args getEmptyArgsInstance() {
        return new selectSql_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectSql_result getResult(I iface, selectSql_args args) throws org.apache.thrift.TException {
        selectSql_result result = new selectSql_result();
        result.success = iface.selectSql(args.sqlCallParameter);
        return result;
      }
    }

    public static class updateSql<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSql_args> {
      public updateSql() {
        super("updateSql");
      }

      public updateSql_args getEmptyArgsInstance() {
        return new updateSql_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSql_result getResult(I iface, updateSql_args args) throws org.apache.thrift.TException {
        updateSql_result result = new updateSql_result();
        result.success = iface.updateSql(args.sqlCallParameter);
        return result;
      }
    }

    public static class deleteSql<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSql_args> {
      public deleteSql() {
        super("deleteSql");
      }

      public deleteSql_args getEmptyArgsInstance() {
        return new deleteSql_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSql_result getResult(I iface, deleteSql_args args) throws org.apache.thrift.TException {
        deleteSql_result result = new deleteSql_result();
        result.success = iface.deleteSql(args.sqlCallParameter);
        return result;
      }
    }

    public static class batchOperationSql<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchOperationSql_args> {
      public batchOperationSql() {
        super("batchOperationSql");
      }

      public batchOperationSql_args getEmptyArgsInstance() {
        return new batchOperationSql_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchOperationSql_result getResult(I iface, batchOperationSql_args args) throws org.apache.thrift.TException {
        batchOperationSql_result result = new batchOperationSql_result();
        result.success = iface.batchOperationSql(args.parameterList);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("insertSql", new insertSql());
      processMap.put("selectSql", new selectSql());
      processMap.put("updateSql", new updateSql());
      processMap.put("deleteSql", new deleteSql());
      processMap.put("batchOperationSql", new batchOperationSql());
      return processMap;
    }

    public static class insertSql<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertSql_args, OperationResult> {
      public insertSql() {
        super("insertSql");
      }

      public insertSql_args getEmptyArgsInstance() {
        return new insertSql_args();
      }

      public AsyncMethodCallback<OperationResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OperationResult>() { 
          public void onComplete(OperationResult o) {
            insertSql_result result = new insertSql_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertSql_result result = new insertSql_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertSql_args args, org.apache.thrift.async.AsyncMethodCallback<OperationResult> resultHandler) throws TException {
        iface.insertSql(args.sqlCallParameter,resultHandler);
      }
    }

    public static class selectSql<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectSql_args, OperationResult> {
      public selectSql() {
        super("selectSql");
      }

      public selectSql_args getEmptyArgsInstance() {
        return new selectSql_args();
      }

      public AsyncMethodCallback<OperationResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OperationResult>() { 
          public void onComplete(OperationResult o) {
            selectSql_result result = new selectSql_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectSql_result result = new selectSql_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectSql_args args, org.apache.thrift.async.AsyncMethodCallback<OperationResult> resultHandler) throws TException {
        iface.selectSql(args.sqlCallParameter,resultHandler);
      }
    }

    public static class updateSql<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSql_args, OperationResult> {
      public updateSql() {
        super("updateSql");
      }

      public updateSql_args getEmptyArgsInstance() {
        return new updateSql_args();
      }

      public AsyncMethodCallback<OperationResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OperationResult>() { 
          public void onComplete(OperationResult o) {
            updateSql_result result = new updateSql_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSql_result result = new updateSql_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSql_args args, org.apache.thrift.async.AsyncMethodCallback<OperationResult> resultHandler) throws TException {
        iface.updateSql(args.sqlCallParameter,resultHandler);
      }
    }

    public static class deleteSql<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSql_args, OperationResult> {
      public deleteSql() {
        super("deleteSql");
      }

      public deleteSql_args getEmptyArgsInstance() {
        return new deleteSql_args();
      }

      public AsyncMethodCallback<OperationResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OperationResult>() { 
          public void onComplete(OperationResult o) {
            deleteSql_result result = new deleteSql_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSql_result result = new deleteSql_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSql_args args, org.apache.thrift.async.AsyncMethodCallback<OperationResult> resultHandler) throws TException {
        iface.deleteSql(args.sqlCallParameter,resultHandler);
      }
    }

    public static class batchOperationSql<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchOperationSql_args, OperationResult> {
      public batchOperationSql() {
        super("batchOperationSql");
      }

      public batchOperationSql_args getEmptyArgsInstance() {
        return new batchOperationSql_args();
      }

      public AsyncMethodCallback<OperationResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OperationResult>() { 
          public void onComplete(OperationResult o) {
            batchOperationSql_result result = new batchOperationSql_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchOperationSql_result result = new batchOperationSql_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchOperationSql_args args, org.apache.thrift.async.AsyncMethodCallback<OperationResult> resultHandler) throws TException {
        iface.batchOperationSql(args.parameterList,resultHandler);
      }
    }

  }

  public static class insertSql_args implements org.apache.thrift.TBase<insertSql_args, insertSql_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertSql_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertSql_args");

    private static final org.apache.thrift.protocol.TField SQL_CALL_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlCallParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertSql_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertSql_argsTupleSchemeFactory());
    }

    public SqlCallParameter sqlCallParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_CALL_PARAMETER((short)1, "sqlCallParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL_CALL_PARAMETER
            return SQL_CALL_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL_CALL_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("sqlCallParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SqlCallParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertSql_args.class, metaDataMap);
    }

    public insertSql_args() {
    }

    public insertSql_args(
      SqlCallParameter sqlCallParameter)
    {
      this();
      this.sqlCallParameter = sqlCallParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertSql_args(insertSql_args other) {
      if (other.isSetSqlCallParameter()) {
        this.sqlCallParameter = new SqlCallParameter(other.sqlCallParameter);
      }
    }

    public insertSql_args deepCopy() {
      return new insertSql_args(this);
    }

    @Override
    public void clear() {
      this.sqlCallParameter = null;
    }

    public SqlCallParameter getSqlCallParameter() {
      return this.sqlCallParameter;
    }

    public insertSql_args setSqlCallParameter(SqlCallParameter sqlCallParameter) {
      this.sqlCallParameter = sqlCallParameter;
      return this;
    }

    public void unsetSqlCallParameter() {
      this.sqlCallParameter = null;
    }

    /** Returns true if field sqlCallParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlCallParameter() {
      return this.sqlCallParameter != null;
    }

    public void setSqlCallParameterIsSet(boolean value) {
      if (!value) {
        this.sqlCallParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_CALL_PARAMETER:
        if (value == null) {
          unsetSqlCallParameter();
        } else {
          setSqlCallParameter((SqlCallParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_CALL_PARAMETER:
        return getSqlCallParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_CALL_PARAMETER:
        return isSetSqlCallParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertSql_args)
        return this.equals((insertSql_args)that);
      return false;
    }

    public boolean equals(insertSql_args that) {
      if (that == null)
        return false;

      boolean this_present_sqlCallParameter = true && this.isSetSqlCallParameter();
      boolean that_present_sqlCallParameter = true && that.isSetSqlCallParameter();
      if (this_present_sqlCallParameter || that_present_sqlCallParameter) {
        if (!(this_present_sqlCallParameter && that_present_sqlCallParameter))
          return false;
        if (!this.sqlCallParameter.equals(that.sqlCallParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sqlCallParameter = true && (isSetSqlCallParameter());
      list.add(present_sqlCallParameter);
      if (present_sqlCallParameter)
        list.add(sqlCallParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertSql_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSqlCallParameter()).compareTo(other.isSetSqlCallParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlCallParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlCallParameter, other.sqlCallParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertSql_args(");
      boolean first = true;

      sb.append("sqlCallParameter:");
      if (this.sqlCallParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlCallParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sqlCallParameter != null) {
        sqlCallParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertSql_argsStandardSchemeFactory implements SchemeFactory {
      public insertSql_argsStandardScheme getScheme() {
        return new insertSql_argsStandardScheme();
      }
    }

    private static class insertSql_argsStandardScheme extends StandardScheme<insertSql_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertSql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL_CALL_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlCallParameter = new SqlCallParameter();
                struct.sqlCallParameter.read(iprot);
                struct.setSqlCallParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertSql_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlCallParameter != null) {
          oprot.writeFieldBegin(SQL_CALL_PARAMETER_FIELD_DESC);
          struct.sqlCallParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertSql_argsTupleSchemeFactory implements SchemeFactory {
      public insertSql_argsTupleScheme getScheme() {
        return new insertSql_argsTupleScheme();
      }
    }

    private static class insertSql_argsTupleScheme extends TupleScheme<insertSql_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertSql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlCallParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlCallParameter()) {
          struct.sqlCallParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertSql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlCallParameter = new SqlCallParameter();
          struct.sqlCallParameter.read(iprot);
          struct.setSqlCallParameterIsSet(true);
        }
      }
    }

  }

  public static class insertSql_result implements org.apache.thrift.TBase<insertSql_result, insertSql_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertSql_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertSql_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertSql_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertSql_resultTupleSchemeFactory());
    }

    public OperationResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OperationResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertSql_result.class, metaDataMap);
    }

    public insertSql_result() {
    }

    public insertSql_result(
      OperationResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertSql_result(insertSql_result other) {
      if (other.isSetSuccess()) {
        this.success = new OperationResult(other.success);
      }
    }

    public insertSql_result deepCopy() {
      return new insertSql_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OperationResult getSuccess() {
      return this.success;
    }

    public insertSql_result setSuccess(OperationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OperationResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertSql_result)
        return this.equals((insertSql_result)that);
      return false;
    }

    public boolean equals(insertSql_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertSql_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertSql_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertSql_resultStandardSchemeFactory implements SchemeFactory {
      public insertSql_resultStandardScheme getScheme() {
        return new insertSql_resultStandardScheme();
      }
    }

    private static class insertSql_resultStandardScheme extends StandardScheme<insertSql_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertSql_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OperationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertSql_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertSql_resultTupleSchemeFactory implements SchemeFactory {
      public insertSql_resultTupleScheme getScheme() {
        return new insertSql_resultTupleScheme();
      }
    }

    private static class insertSql_resultTupleScheme extends TupleScheme<insertSql_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertSql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertSql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OperationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectSql_args implements org.apache.thrift.TBase<selectSql_args, selectSql_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectSql_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSql_args");

    private static final org.apache.thrift.protocol.TField SQL_CALL_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlCallParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSql_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSql_argsTupleSchemeFactory());
    }

    public SqlCallParameter sqlCallParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_CALL_PARAMETER((short)1, "sqlCallParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL_CALL_PARAMETER
            return SQL_CALL_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL_CALL_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("sqlCallParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SqlCallParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSql_args.class, metaDataMap);
    }

    public selectSql_args() {
    }

    public selectSql_args(
      SqlCallParameter sqlCallParameter)
    {
      this();
      this.sqlCallParameter = sqlCallParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSql_args(selectSql_args other) {
      if (other.isSetSqlCallParameter()) {
        this.sqlCallParameter = new SqlCallParameter(other.sqlCallParameter);
      }
    }

    public selectSql_args deepCopy() {
      return new selectSql_args(this);
    }

    @Override
    public void clear() {
      this.sqlCallParameter = null;
    }

    public SqlCallParameter getSqlCallParameter() {
      return this.sqlCallParameter;
    }

    public selectSql_args setSqlCallParameter(SqlCallParameter sqlCallParameter) {
      this.sqlCallParameter = sqlCallParameter;
      return this;
    }

    public void unsetSqlCallParameter() {
      this.sqlCallParameter = null;
    }

    /** Returns true if field sqlCallParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlCallParameter() {
      return this.sqlCallParameter != null;
    }

    public void setSqlCallParameterIsSet(boolean value) {
      if (!value) {
        this.sqlCallParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_CALL_PARAMETER:
        if (value == null) {
          unsetSqlCallParameter();
        } else {
          setSqlCallParameter((SqlCallParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_CALL_PARAMETER:
        return getSqlCallParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_CALL_PARAMETER:
        return isSetSqlCallParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSql_args)
        return this.equals((selectSql_args)that);
      return false;
    }

    public boolean equals(selectSql_args that) {
      if (that == null)
        return false;

      boolean this_present_sqlCallParameter = true && this.isSetSqlCallParameter();
      boolean that_present_sqlCallParameter = true && that.isSetSqlCallParameter();
      if (this_present_sqlCallParameter || that_present_sqlCallParameter) {
        if (!(this_present_sqlCallParameter && that_present_sqlCallParameter))
          return false;
        if (!this.sqlCallParameter.equals(that.sqlCallParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sqlCallParameter = true && (isSetSqlCallParameter());
      list.add(present_sqlCallParameter);
      if (present_sqlCallParameter)
        list.add(sqlCallParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectSql_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSqlCallParameter()).compareTo(other.isSetSqlCallParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlCallParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlCallParameter, other.sqlCallParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSql_args(");
      boolean first = true;

      sb.append("sqlCallParameter:");
      if (this.sqlCallParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlCallParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sqlCallParameter != null) {
        sqlCallParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSql_argsStandardSchemeFactory implements SchemeFactory {
      public selectSql_argsStandardScheme getScheme() {
        return new selectSql_argsStandardScheme();
      }
    }

    private static class selectSql_argsStandardScheme extends StandardScheme<selectSql_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL_CALL_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlCallParameter = new SqlCallParameter();
                struct.sqlCallParameter.read(iprot);
                struct.setSqlCallParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSql_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlCallParameter != null) {
          oprot.writeFieldBegin(SQL_CALL_PARAMETER_FIELD_DESC);
          struct.sqlCallParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSql_argsTupleSchemeFactory implements SchemeFactory {
      public selectSql_argsTupleScheme getScheme() {
        return new selectSql_argsTupleScheme();
      }
    }

    private static class selectSql_argsTupleScheme extends TupleScheme<selectSql_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlCallParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlCallParameter()) {
          struct.sqlCallParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlCallParameter = new SqlCallParameter();
          struct.sqlCallParameter.read(iprot);
          struct.setSqlCallParameterIsSet(true);
        }
      }
    }

  }

  public static class selectSql_result implements org.apache.thrift.TBase<selectSql_result, selectSql_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectSql_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSql_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSql_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSql_resultTupleSchemeFactory());
    }

    public OperationResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OperationResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSql_result.class, metaDataMap);
    }

    public selectSql_result() {
    }

    public selectSql_result(
      OperationResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSql_result(selectSql_result other) {
      if (other.isSetSuccess()) {
        this.success = new OperationResult(other.success);
      }
    }

    public selectSql_result deepCopy() {
      return new selectSql_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OperationResult getSuccess() {
      return this.success;
    }

    public selectSql_result setSuccess(OperationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OperationResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSql_result)
        return this.equals((selectSql_result)that);
      return false;
    }

    public boolean equals(selectSql_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectSql_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSql_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSql_resultStandardSchemeFactory implements SchemeFactory {
      public selectSql_resultStandardScheme getScheme() {
        return new selectSql_resultStandardScheme();
      }
    }

    private static class selectSql_resultStandardScheme extends StandardScheme<selectSql_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSql_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OperationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSql_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSql_resultTupleSchemeFactory implements SchemeFactory {
      public selectSql_resultTupleScheme getScheme() {
        return new selectSql_resultTupleScheme();
      }
    }

    private static class selectSql_resultTupleScheme extends TupleScheme<selectSql_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OperationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSql_args implements org.apache.thrift.TBase<updateSql_args, updateSql_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSql_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSql_args");

    private static final org.apache.thrift.protocol.TField SQL_CALL_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlCallParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSql_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSql_argsTupleSchemeFactory());
    }

    public SqlCallParameter sqlCallParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_CALL_PARAMETER((short)1, "sqlCallParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL_CALL_PARAMETER
            return SQL_CALL_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL_CALL_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("sqlCallParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SqlCallParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSql_args.class, metaDataMap);
    }

    public updateSql_args() {
    }

    public updateSql_args(
      SqlCallParameter sqlCallParameter)
    {
      this();
      this.sqlCallParameter = sqlCallParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSql_args(updateSql_args other) {
      if (other.isSetSqlCallParameter()) {
        this.sqlCallParameter = new SqlCallParameter(other.sqlCallParameter);
      }
    }

    public updateSql_args deepCopy() {
      return new updateSql_args(this);
    }

    @Override
    public void clear() {
      this.sqlCallParameter = null;
    }

    public SqlCallParameter getSqlCallParameter() {
      return this.sqlCallParameter;
    }

    public updateSql_args setSqlCallParameter(SqlCallParameter sqlCallParameter) {
      this.sqlCallParameter = sqlCallParameter;
      return this;
    }

    public void unsetSqlCallParameter() {
      this.sqlCallParameter = null;
    }

    /** Returns true if field sqlCallParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlCallParameter() {
      return this.sqlCallParameter != null;
    }

    public void setSqlCallParameterIsSet(boolean value) {
      if (!value) {
        this.sqlCallParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_CALL_PARAMETER:
        if (value == null) {
          unsetSqlCallParameter();
        } else {
          setSqlCallParameter((SqlCallParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_CALL_PARAMETER:
        return getSqlCallParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_CALL_PARAMETER:
        return isSetSqlCallParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSql_args)
        return this.equals((updateSql_args)that);
      return false;
    }

    public boolean equals(updateSql_args that) {
      if (that == null)
        return false;

      boolean this_present_sqlCallParameter = true && this.isSetSqlCallParameter();
      boolean that_present_sqlCallParameter = true && that.isSetSqlCallParameter();
      if (this_present_sqlCallParameter || that_present_sqlCallParameter) {
        if (!(this_present_sqlCallParameter && that_present_sqlCallParameter))
          return false;
        if (!this.sqlCallParameter.equals(that.sqlCallParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sqlCallParameter = true && (isSetSqlCallParameter());
      list.add(present_sqlCallParameter);
      if (present_sqlCallParameter)
        list.add(sqlCallParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSql_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSqlCallParameter()).compareTo(other.isSetSqlCallParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlCallParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlCallParameter, other.sqlCallParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSql_args(");
      boolean first = true;

      sb.append("sqlCallParameter:");
      if (this.sqlCallParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlCallParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sqlCallParameter != null) {
        sqlCallParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSql_argsStandardSchemeFactory implements SchemeFactory {
      public updateSql_argsStandardScheme getScheme() {
        return new updateSql_argsStandardScheme();
      }
    }

    private static class updateSql_argsStandardScheme extends StandardScheme<updateSql_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL_CALL_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlCallParameter = new SqlCallParameter();
                struct.sqlCallParameter.read(iprot);
                struct.setSqlCallParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSql_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlCallParameter != null) {
          oprot.writeFieldBegin(SQL_CALL_PARAMETER_FIELD_DESC);
          struct.sqlCallParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSql_argsTupleSchemeFactory implements SchemeFactory {
      public updateSql_argsTupleScheme getScheme() {
        return new updateSql_argsTupleScheme();
      }
    }

    private static class updateSql_argsTupleScheme extends TupleScheme<updateSql_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlCallParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlCallParameter()) {
          struct.sqlCallParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlCallParameter = new SqlCallParameter();
          struct.sqlCallParameter.read(iprot);
          struct.setSqlCallParameterIsSet(true);
        }
      }
    }

  }

  public static class updateSql_result implements org.apache.thrift.TBase<updateSql_result, updateSql_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSql_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSql_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSql_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSql_resultTupleSchemeFactory());
    }

    public OperationResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OperationResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSql_result.class, metaDataMap);
    }

    public updateSql_result() {
    }

    public updateSql_result(
      OperationResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSql_result(updateSql_result other) {
      if (other.isSetSuccess()) {
        this.success = new OperationResult(other.success);
      }
    }

    public updateSql_result deepCopy() {
      return new updateSql_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OperationResult getSuccess() {
      return this.success;
    }

    public updateSql_result setSuccess(OperationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OperationResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSql_result)
        return this.equals((updateSql_result)that);
      return false;
    }

    public boolean equals(updateSql_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSql_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSql_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSql_resultStandardSchemeFactory implements SchemeFactory {
      public updateSql_resultStandardScheme getScheme() {
        return new updateSql_resultStandardScheme();
      }
    }

    private static class updateSql_resultStandardScheme extends StandardScheme<updateSql_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSql_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OperationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSql_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSql_resultTupleSchemeFactory implements SchemeFactory {
      public updateSql_resultTupleScheme getScheme() {
        return new updateSql_resultTupleScheme();
      }
    }

    private static class updateSql_resultTupleScheme extends TupleScheme<updateSql_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OperationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteSql_args implements org.apache.thrift.TBase<deleteSql_args, deleteSql_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSql_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSql_args");

    private static final org.apache.thrift.protocol.TField SQL_CALL_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlCallParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSql_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSql_argsTupleSchemeFactory());
    }

    public SqlCallParameter sqlCallParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL_CALL_PARAMETER((short)1, "sqlCallParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL_CALL_PARAMETER
            return SQL_CALL_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL_CALL_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("sqlCallParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SqlCallParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSql_args.class, metaDataMap);
    }

    public deleteSql_args() {
    }

    public deleteSql_args(
      SqlCallParameter sqlCallParameter)
    {
      this();
      this.sqlCallParameter = sqlCallParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSql_args(deleteSql_args other) {
      if (other.isSetSqlCallParameter()) {
        this.sqlCallParameter = new SqlCallParameter(other.sqlCallParameter);
      }
    }

    public deleteSql_args deepCopy() {
      return new deleteSql_args(this);
    }

    @Override
    public void clear() {
      this.sqlCallParameter = null;
    }

    public SqlCallParameter getSqlCallParameter() {
      return this.sqlCallParameter;
    }

    public deleteSql_args setSqlCallParameter(SqlCallParameter sqlCallParameter) {
      this.sqlCallParameter = sqlCallParameter;
      return this;
    }

    public void unsetSqlCallParameter() {
      this.sqlCallParameter = null;
    }

    /** Returns true if field sqlCallParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetSqlCallParameter() {
      return this.sqlCallParameter != null;
    }

    public void setSqlCallParameterIsSet(boolean value) {
      if (!value) {
        this.sqlCallParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL_CALL_PARAMETER:
        if (value == null) {
          unsetSqlCallParameter();
        } else {
          setSqlCallParameter((SqlCallParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL_CALL_PARAMETER:
        return getSqlCallParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL_CALL_PARAMETER:
        return isSetSqlCallParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSql_args)
        return this.equals((deleteSql_args)that);
      return false;
    }

    public boolean equals(deleteSql_args that) {
      if (that == null)
        return false;

      boolean this_present_sqlCallParameter = true && this.isSetSqlCallParameter();
      boolean that_present_sqlCallParameter = true && that.isSetSqlCallParameter();
      if (this_present_sqlCallParameter || that_present_sqlCallParameter) {
        if (!(this_present_sqlCallParameter && that_present_sqlCallParameter))
          return false;
        if (!this.sqlCallParameter.equals(that.sqlCallParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sqlCallParameter = true && (isSetSqlCallParameter());
      list.add(present_sqlCallParameter);
      if (present_sqlCallParameter)
        list.add(sqlCallParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSql_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSqlCallParameter()).compareTo(other.isSetSqlCallParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSqlCallParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlCallParameter, other.sqlCallParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSql_args(");
      boolean first = true;

      sb.append("sqlCallParameter:");
      if (this.sqlCallParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlCallParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sqlCallParameter != null) {
        sqlCallParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSql_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSql_argsStandardScheme getScheme() {
        return new deleteSql_argsStandardScheme();
      }
    }

    private static class deleteSql_argsStandardScheme extends StandardScheme<deleteSql_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL_CALL_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sqlCallParameter = new SqlCallParameter();
                struct.sqlCallParameter.read(iprot);
                struct.setSqlCallParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSql_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sqlCallParameter != null) {
          oprot.writeFieldBegin(SQL_CALL_PARAMETER_FIELD_DESC);
          struct.sqlCallParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSql_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSql_argsTupleScheme getScheme() {
        return new deleteSql_argsTupleScheme();
      }
    }

    private static class deleteSql_argsTupleScheme extends TupleScheme<deleteSql_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSqlCallParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSqlCallParameter()) {
          struct.sqlCallParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sqlCallParameter = new SqlCallParameter();
          struct.sqlCallParameter.read(iprot);
          struct.setSqlCallParameterIsSet(true);
        }
      }
    }

  }

  public static class deleteSql_result implements org.apache.thrift.TBase<deleteSql_result, deleteSql_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSql_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSql_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSql_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSql_resultTupleSchemeFactory());
    }

    public OperationResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OperationResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSql_result.class, metaDataMap);
    }

    public deleteSql_result() {
    }

    public deleteSql_result(
      OperationResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSql_result(deleteSql_result other) {
      if (other.isSetSuccess()) {
        this.success = new OperationResult(other.success);
      }
    }

    public deleteSql_result deepCopy() {
      return new deleteSql_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OperationResult getSuccess() {
      return this.success;
    }

    public deleteSql_result setSuccess(OperationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OperationResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSql_result)
        return this.equals((deleteSql_result)that);
      return false;
    }

    public boolean equals(deleteSql_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSql_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSql_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSql_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSql_resultStandardScheme getScheme() {
        return new deleteSql_resultStandardScheme();
      }
    }

    private static class deleteSql_resultStandardScheme extends StandardScheme<deleteSql_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSql_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OperationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSql_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSql_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSql_resultTupleScheme getScheme() {
        return new deleteSql_resultTupleScheme();
      }
    }

    private static class deleteSql_resultTupleScheme extends TupleScheme<deleteSql_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OperationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchOperationSql_args implements org.apache.thrift.TBase<batchOperationSql_args, batchOperationSql_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchOperationSql_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchOperationSql_args");

    private static final org.apache.thrift.protocol.TField PARAMETER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchOperationSql_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchOperationSql_argsTupleSchemeFactory());
    }

    public List<SqlCallParameter> parameterList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMETER_LIST((short)1, "parameterList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMETER_LIST
            return PARAMETER_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMETER_LIST, new org.apache.thrift.meta_data.FieldMetaData("parameterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SqlCallParameter.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchOperationSql_args.class, metaDataMap);
    }

    public batchOperationSql_args() {
    }

    public batchOperationSql_args(
      List<SqlCallParameter> parameterList)
    {
      this();
      this.parameterList = parameterList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchOperationSql_args(batchOperationSql_args other) {
      if (other.isSetParameterList()) {
        List<SqlCallParameter> __this__parameterList = new ArrayList<SqlCallParameter>(other.parameterList.size());
        for (SqlCallParameter other_element : other.parameterList) {
          __this__parameterList.add(new SqlCallParameter(other_element));
        }
        this.parameterList = __this__parameterList;
      }
    }

    public batchOperationSql_args deepCopy() {
      return new batchOperationSql_args(this);
    }

    @Override
    public void clear() {
      this.parameterList = null;
    }

    public int getParameterListSize() {
      return (this.parameterList == null) ? 0 : this.parameterList.size();
    }

    public java.util.Iterator<SqlCallParameter> getParameterListIterator() {
      return (this.parameterList == null) ? null : this.parameterList.iterator();
    }

    public void addToParameterList(SqlCallParameter elem) {
      if (this.parameterList == null) {
        this.parameterList = new ArrayList<SqlCallParameter>();
      }
      this.parameterList.add(elem);
    }

    public List<SqlCallParameter> getParameterList() {
      return this.parameterList;
    }

    public batchOperationSql_args setParameterList(List<SqlCallParameter> parameterList) {
      this.parameterList = parameterList;
      return this;
    }

    public void unsetParameterList() {
      this.parameterList = null;
    }

    /** Returns true if field parameterList is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterList() {
      return this.parameterList != null;
    }

    public void setParameterListIsSet(boolean value) {
      if (!value) {
        this.parameterList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMETER_LIST:
        if (value == null) {
          unsetParameterList();
        } else {
          setParameterList((List<SqlCallParameter>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMETER_LIST:
        return getParameterList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMETER_LIST:
        return isSetParameterList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchOperationSql_args)
        return this.equals((batchOperationSql_args)that);
      return false;
    }

    public boolean equals(batchOperationSql_args that) {
      if (that == null)
        return false;

      boolean this_present_parameterList = true && this.isSetParameterList();
      boolean that_present_parameterList = true && that.isSetParameterList();
      if (this_present_parameterList || that_present_parameterList) {
        if (!(this_present_parameterList && that_present_parameterList))
          return false;
        if (!this.parameterList.equals(that.parameterList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_parameterList = true && (isSetParameterList());
      list.add(present_parameterList);
      if (present_parameterList)
        list.add(parameterList);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchOperationSql_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParameterList()).compareTo(other.isSetParameterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterList, other.parameterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchOperationSql_args(");
      boolean first = true;

      sb.append("parameterList:");
      if (this.parameterList == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchOperationSql_argsStandardSchemeFactory implements SchemeFactory {
      public batchOperationSql_argsStandardScheme getScheme() {
        return new batchOperationSql_argsStandardScheme();
      }
    }

    private static class batchOperationSql_argsStandardScheme extends StandardScheme<batchOperationSql_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchOperationSql_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMETER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.parameterList = new ArrayList<SqlCallParameter>(_list18.size);
                  SqlCallParameter _elem19;
                  for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                  {
                    _elem19 = new SqlCallParameter();
                    _elem19.read(iprot);
                    struct.parameterList.add(_elem19);
                  }
                  iprot.readListEnd();
                }
                struct.setParameterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchOperationSql_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.parameterList != null) {
          oprot.writeFieldBegin(PARAMETER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parameterList.size()));
            for (SqlCallParameter _iter21 : struct.parameterList)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchOperationSql_argsTupleSchemeFactory implements SchemeFactory {
      public batchOperationSql_argsTupleScheme getScheme() {
        return new batchOperationSql_argsTupleScheme();
      }
    }

    private static class batchOperationSql_argsTupleScheme extends TupleScheme<batchOperationSql_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchOperationSql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParameterList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParameterList()) {
          {
            oprot.writeI32(struct.parameterList.size());
            for (SqlCallParameter _iter22 : struct.parameterList)
            {
              _iter22.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchOperationSql_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.parameterList = new ArrayList<SqlCallParameter>(_list23.size);
            SqlCallParameter _elem24;
            for (int _i25 = 0; _i25 < _list23.size; ++_i25)
            {
              _elem24 = new SqlCallParameter();
              _elem24.read(iprot);
              struct.parameterList.add(_elem24);
            }
          }
          struct.setParameterListIsSet(true);
        }
      }
    }

  }

  public static class batchOperationSql_result implements org.apache.thrift.TBase<batchOperationSql_result, batchOperationSql_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchOperationSql_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchOperationSql_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchOperationSql_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchOperationSql_resultTupleSchemeFactory());
    }

    public OperationResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OperationResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchOperationSql_result.class, metaDataMap);
    }

    public batchOperationSql_result() {
    }

    public batchOperationSql_result(
      OperationResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchOperationSql_result(batchOperationSql_result other) {
      if (other.isSetSuccess()) {
        this.success = new OperationResult(other.success);
      }
    }

    public batchOperationSql_result deepCopy() {
      return new batchOperationSql_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OperationResult getSuccess() {
      return this.success;
    }

    public batchOperationSql_result setSuccess(OperationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OperationResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchOperationSql_result)
        return this.equals((batchOperationSql_result)that);
      return false;
    }

    public boolean equals(batchOperationSql_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchOperationSql_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchOperationSql_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchOperationSql_resultStandardSchemeFactory implements SchemeFactory {
      public batchOperationSql_resultStandardScheme getScheme() {
        return new batchOperationSql_resultStandardScheme();
      }
    }

    private static class batchOperationSql_resultStandardScheme extends StandardScheme<batchOperationSql_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchOperationSql_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OperationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchOperationSql_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchOperationSql_resultTupleSchemeFactory implements SchemeFactory {
      public batchOperationSql_resultTupleScheme getScheme() {
        return new batchOperationSql_resultTupleScheme();
      }
    }

    private static class batchOperationSql_resultTupleScheme extends TupleScheme<batchOperationSql_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchOperationSql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchOperationSql_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OperationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
